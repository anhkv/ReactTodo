{"version":3,"sources":["component/Stat.js","component/Todo.js","component/NewTodoForm.js","component/content/index.js","App.js","serviceWorker.js","index.js"],"names":["Stat","_this$props","this","props","done","total","react_default","a","createElement","Component","Todo","todoList","todo","style","type","onChange","onDoneChange","checked","readOnly","name","NewTodoForm","state","newTodoName","setState","_this2","onNewTodo","event","console","log","target","onInputChange","value","disabled","onClick","Content","todos","forEach","todoId","fetch","method","then","res","json","filter","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","deleteTodo","id","t0","sent","abrupt","stop","_x2","apply","arguments","loadTodo","headers","Content-Type","body","JSON","stringify","todoIndex","updatedTodos","putTodo","newTodo","postTodo","response","_this3","_this4","countDone","length","todoLabelStyle","textDecoration","color","className","Stat_Stat","clearDone","map","index","Todo_Todo","handleDoneChange","key","NewTodoForm_NewTodoForm","addNewTodo","App","content_Content","params","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3b471ec.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class Stat extends Component{\n    render() {\n\n        const {done, total} = this.props;\n\n        return (\n            <strong>\n                <span>\n                    Các công việc hoàn thành ({done})\n                </span>\n\n                /\n\n                <span>\n                    Tổng số công việc ({total})\n                </span>\n            </strong>\n        );\n    }\n}","import React, {Component} from 'react';\n\nexport default class Todo extends Component{\n\n    render() {\n        const todoList = this.props.todo;\n        const style = this.props.style;\n        return (\n            <li style={style}>\n                <input type='checkbox' onChange={this.props.onDoneChange} checked={todoList.done} readOnly={true}/>\n                <span>{todoList.name}</span>\n            </li>\n        );\n    }\n}","import React, {Component} from 'react';\n\nexport default class NewTodoForm extends Component{\n\n    state = {\n        newTodoName: ''\n    };\n\n    onInputChange(newTodoName) {\n        this.setState({\n            newTodoName: newTodoName\n        });\n    }\n\n    render() {\n        const {onNewTodo} = this.props;\n        return (\n            <div>\n                <input type=\"text\" onChange={(event) => {\n                    console.log(event.target);\n                    this.onInputChange(event.target.value)\n                }} value={this.state.newTodoName}/>\n                <button disabled={!this.state.newTodoName} type=\"submit\" onClick={() => {onNewTodo({name: this.state.newTodoName, done: false})}}>Create</button>\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\n// import logo from '../../logo.svg';\nimport '../../App.css';\nimport Stat from \"../Stat\";\nimport Todo from \"../Todo\";\nimport NewTodoForm from \"../NewTodoForm\";\n\nexport default class Content extends Component {\n\n    state = {\n        todos: [],\n    };\n\n    countDone() {\n        let done = 0;\n        this.state.todos.forEach(todo => {\n            if (todo.done) {\n                done++;\n            }\n        });\n        return done;\n    }\n\n    async deleteTodo(todoId) {\n        await fetch('http://todos.sphinx-demo.com/todos/'+todoId, {\n            method: 'DELETE',\n        }).then(res => res.json());\n    }\n\n    async clearDone() {\n        await this.state.todos.filter(async (todo) => todo.done ? await this.deleteTodo(todo.id) : !todo.done);\n        await this.loadTodo();\n    }\n\n    async putTodo(todo) {\n        await fetch('http://todos.sphinx-demo.com/todos/'+todo.id, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({done: todo.done}),\n        });\n    }\n\n    async handleDoneChange(todoIndex) {\n        let updatedTodos = this.state.todos;\n        updatedTodos[todoIndex].done = !updatedTodos[todoIndex].done;\n        await this.putTodo(updatedTodos[todoIndex]);\n        await this.loadTodo();\n    }\n\n    async postTodo(newTodo) {\n        await fetch('http://todos.sphinx-demo.com/todos', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newTodo)\n        })\n    }\n\n    async addNewTodo(newTodo) {\n        // this.setState({\n        //     todos: [newTodo, ...this.state.todos]\n        // })\n\n        await this.postTodo(newTodo);\n        await this.loadTodo();\n    }\n    async loadTodo() {\n        await fetch('http://todos.sphinx-demo.com/todos')\n            .then(response => response.json())\n            .then(todo => this.setState({todos: todo}));\n    }\n\n    async componentDidMount() {\n        await this.loadTodo();\n    }\n\n    render() {\n        const done = this.countDone();\n        const total = this.state.todos.length;\n        const todoLabelStyle = {\n            textDecoration: 'line-through',\n            color: \"gray\"\n        };\n\n        return (\n            <div>\n                <div className={'todo-header'}>\n                    <Stat done={done} total={total}/>\n                    <button onClick={() => this.clearDone()}>Clear</button>\n                </div>\n                <div className={'todo-list'}>\n                    <ul>\n                        {\n                            this.state.todos.map((todo, index) => {\n                                if (!!todo.done) {\n                                    return (<Todo onDoneChange={() => {\n                                        this.handleDoneChange(index)\n                                    }} key={index} todo={todo} style={todoLabelStyle}/>)\n                                }\n                                return (<Todo onDoneChange={() => {\n                                    this.handleDoneChange(index)\n                                }} key={index} todo={todo}/>)\n                            })\n                        }\n                    </ul>\n                </div>\n                <div>\n                    <NewTodoForm onNewTodo={(newTodo) => {\n                        this.addNewTodo(newTodo)\n                    }}/>\n                </div>\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport Content from './component/content'\n\nexport default class App extends Component{\n\n  render() {\n    return (\n          <Content params={true}/>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}